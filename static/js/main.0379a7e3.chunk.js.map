{"version":3,"sources":["components/navbar.js","components/clock.js","components/cell.js","components/board.js","App.js","serviceWorker.js","index.js"],"names":["style","textAlign","Navbar","props","react_default","a","createElement","Clock","className","generation","Cell","onClick","color","alive","id","Board","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","matrix","createNewMatrix","rows","cols","isRunning","randomness","intervalId","tick","bind","assertThisInitialized","handleStartOrPause","handleRandomization","handleReset","getNeighbors","handleCellToggle","newState","setState","setInterval","clearInterval","toConsumableArray","Array","map","fill","res","i","length","j","Math","random","row","col","neighbors","dirs","dir","y1","x1","nextGen","e","target","x","split","y","update","_this2","components_cell","key","components_clock","React","Component","App","navbar","components_board","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0379a7e3.chunk.js","sourcesContent":["import React from 'react';\n\nconst style = {\n    textAlign: 'center',\n}\n\nfunction Navbar(props) {\n    return(\n        <nav style={style}>\n            <h1>Game of Life</h1>\n        </nav>\n    );\n};\n\nexport default Navbar;\n","import React from 'react';\nimport './clock.css'\n\nfunction Clock(props) {\n    return (\n    <div className='clock'>\n        <h1>Generation: {props.generation}</h1>\n    </div>)\n};\n\nexport default Clock;\n","import React from 'react';\nimport './cell.css'\n\nfunction Cell(props) {\n    const onClick = props.onClick;\n    const color = props.alive ? 'alive' : 'dead'\n    return (\n        <div  id={props.id} onClick={onClick} className={'square ' + color} />);\n};\n\nexport default Cell;\n","import React from 'react';\nimport './board.css'\nimport Clock from './clock';\nimport Cell from './cell';\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        const rows = 30;\n        const cols = 30;\n\n        this.state = {\n            matrix: this.createNewMatrix(rows, cols),\n            rows: rows,\n            cols: cols,\n            generation: 0,\n            isRunning: false,\n            randomness: 0.8,\n            intervalId: ''\n        };\n\n        this.tick = this.tick.bind(this);\n        this.handleStartOrPause = this.handleStartOrPause.bind(this);\n        this.handleRandomization = this.handleRandomization.bind(this);\n        this.handleReset = this.handleReset.bind(this);\n        this.getNeighbors = this.getNeighbors.bind(this);\n        this.createNewMatrix = this.createNewMatrix.bind(this);\n        this.handleCellToggle = this.handleCellToggle.bind(this);\n    };\n\n    handleStartOrPause() {\n        const newState = this.state.isRunning ? false : true;\n\n        if (newState) {\n            this.setState({\n                intervalId: setInterval(\n                    this.tick,\n                    200),\n                isRunning: newState\n            })\n        }\n        else {\n            this.setState({\n                isRunning: newState\n            });\n            clearInterval(this.state.intervalId);\n        };\n    };\n\n    createNewMatrix(rows, cols) {\n        return ([...Array(rows)].map(\n            () => [...Array(cols)].fill(false)));\n    }\n\n    handleRandomization() {\n        let res = this.createNewMatrix(this.state.rows, this.state.cols);\n\n        for (let i = 0; i < res.length; i++) {\n            for (let j = 0; j < res[0].length; j++) {\n                res[i][j] = Math.random() > this.state.randomness;\n            }\n        };\n\n        this.setState({\n            matrix: res,\n            generation: 0\n        });\n    };\n\n    getNeighbors(row, col) {\n        let neighbors = 0;\n        const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\n\n        for (let i = 0; i < dirs.length; i++) {\n            const dir = dirs[i];\n            let y1 = row + dir[0];\n            let x1 = col + dir[1];\n\n            if (x1 >= 0 && x1 < this.state.rows &&\n                y1 >= 0 && y1 < this.state.cols &&\n                this.state.matrix[y1][x1]) {\n                neighbors++;\n            }\n        }\n\n        return neighbors;\n    };\n\n    tick() {\n        const nextGen = this.createNewMatrix(this.state.rows, this.state.cols);\n\n        for (let i = 0; i < this.state.rows; i++) {\n            for (let j = 0; j < this.state.cols; j++) {\n                let neighbors = this.getNeighbors(i, j);\n                if (this.state.matrix[i][j]) {\n                    if (neighbors === 3 || neighbors === 2) {\n                        nextGen[i][j] = true;\n                    }\n                    else {\n                        nextGen[i][j] = false;\n                    }\n                }\n                else if (neighbors === 3) {\n                    nextGen[i][j] = true;\n                }\n            };\n        };\n\n        this.setState({\n            matrix: nextGen,\n            generation: this.state.generation + 1\n        });\n    };\n\n    handleCellToggle(e) {\n        const id = e.target.id;\n        const x = id.split('-')[0];\n        const y = id.split('-')[1];\n        const update = this.state.matrix;\n\n        update[x][y] = !this.state.matrix[x][y];\n        this.setState({ matrix: update });\n    }\n\n    handleReset() {\n        this.setState({\n            matrix: this.createNewMatrix(this.state.rows, this.state.cols),\n            isRunning: false,\n            generation: 0\n        });\n        clearInterval(this.state.intervalId);\n    };\n\n    render() {\n        return (\n            <div className='boardWrapper'>\n                <div className='options'>\n                    <button className='option' onClick={this.handleRandomization}>\n                        Randomize\n                    </button>\n                    <button onClick={this.handleStartOrPause} className={'option'} >\n                        {this.state.isRunning ? 'Pause' : 'Start'}\n                    </button>\n                    <button onClick={this.handleReset}>\n                        Reset\n                    </button>\n                </div>\n                <div className='board'>\n                    {this.state.matrix.map((row, x) =>\n                        row.map(\n                            (col, y) => <Cell id={x + '-' + y} onClick={this.handleCellToggle} alive={col} key={x + y} />\n                        )\n                    )}\n                </div>\n                <Clock generation={this.state.generation} />\n            </div>)\n    };\n};\n\nexport default Board;\n","import React from 'react';\nimport Navbar from './components/navbar'\nimport Board from './components/board'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Board/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}